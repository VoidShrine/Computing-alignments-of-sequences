'''
Project 4 - Computing alignments of sequences
'''

def build_scoring_matrix(alphabet, diag_score, off_diag_score, dash_score):
    '''
    Takes as input a set of characters alphabet and three scores diag_score,
    off_diag_score, and dash_score. The function returns a dictionary of
    dictionaries whose entries are indexed by pairs of characters in alphabet
    plus '-'. 
    '''
    mat = {}
    dummy = alphabet.copy()
    dummy.add('-')
    for item_i in dummy:
        row = {}
        for item_j in dummy:
            if item_i == '-' or item_j == '-':
                row[item_j] = dash_score
            elif item_i == item_j:
                row[item_j] = diag_score
            else:
                row[item_j] = off_diag_score
        mat[item_i] = row
        
    return mat

def compute_global_alignment(seq_x, seq_y, scr_mat, ali_mat):
    '''
    Takes as input two sequences seq_x and seq_y whose elements share a
    common alphabet with the scoring matrix scoring_matrix. This function
    computes a global alignment of seq_x and seq_y using the global
    alignment matrix alignment_matrix.
    '''
    len_x = len(seq_x)
    len_y = len(seq_y)
    opt_x = ''
    opt_y = ''
    while len_x != 0 and len_y != 0:
        if ali_mat[len_x][len_y] == ali_mat[len_x - 1][len_y - 1] + scr_mat[seq_x[len_x - 1]][seq_y[len_y - 1]]:
            opt_x = seq_x[len_x - 1] + opt_x[:]
            opt_y = seq_y[len_y - 1] + opt_y[:]
            len_x -= 1
            len_y -= 1
        else:
            if ali_mat[len_x][len_y] == ali_mat[len_x - 1][len_y] + scr_mat[seq_x[len_x - 1]]['-']:
                opt_x = seq_x[len_x - 1] + opt_x[:]
                opt_y = '-' + opt_y[:]
                len_x -= 1
            else:
                opt_x = '-' + opt_x[:]
                opt_y = seq_y[len_y - 1] + opt_y[:]
                len_y -= 1
    while len_x != 0:
        opt_x = seq_x[len_x - 1] + opt_x[:]
        opt_y = '-' + opt_y[:]
        len_x -= 1
    while len_y != 0:
        opt_x = '-' + opt_x[:]
        opt_y = seq_y[len_y - 1] + opt_y[:]
        len_y -= 1
    return (ali_mat[len(ali_mat) - 1][len(ali_mat[0]) - 1], opt_x, opt_y)

def compute_local_alignment(seq_x, seq_y, scr_mat, ali_mat):
    '''
    Takes as input two sequences seq_x and seq_y whose elements share a
    common alphabet with the scoring matrix scoring_matrix. This function
    computes a local alignment of seq_x and seq_y using the local 
    alignment matrix alignment_matrix.
    '''
    opt = 0
    len_x = 0
    len_y = 0
    for idxi in range(len(ali_mat)):
        for idxj in range(len(ali_mat[idxi])):
            if ali_mat[idxi][idxj] > opt:
                opt = ali_mat[idxi][idxj]
                len_x = idxi
                len_y = idxj
    
    opt_x = ''
    opt_y = ''
    while ali_mat[len_x][len_y] != 0:
        if ali_mat[len_x][len_y] == ali_mat[len_x - 1][len_y - 1] + scr_mat[seq_x[len_x - 1]][seq_y[len_y - 1]]:
            opt_x = seq_x[len_x - 1] + opt_x[:]
            opt_y = seq_y[len_y - 1] + opt_y[:]
            len_x -= 1
            len_y -= 1
        else:
            if ali_mat[len_x][len_y] == ali_mat[len_x - 1][len_y] + scr_mat[seq_x[len_x - 1]]['-']:
                opt_x = seq_x[len_x - 1] + opt_x[:]
                opt_y = '-' + opt_y[:]
                len_x -= 1
            else:
                opt_x = '-' + opt_x[:]
                opt_y = seq_y[len_y - 1] + opt_y[:]
                len_y -= 1
    return (opt, opt_x, opt_y)

def compute_alignment_matrix(seq_x, seq_y, scr_mat, global_flag):
    '''
    Takes as input two sequences seq_x and seq_y whose elements share a
    common alphabet with the scoring matrix scoring_matrix. The function
    computes and returns the alignment matrix for seq_x and seq_y
    '''
    len_x = len(seq_x)
    len_y = len(seq_y)
    table_s = [[0 for dummy_1 in range(len_y + 1)] for dummy_2 in range(len_x + 1)]
    
    if global_flag == True:
        for idx in range(len_x):
            table_s[idx + 1][0] = table_s[idx][0] + scr_mat[seq_x[idx]]['-']
        for jdx in range(len_y):
            table_s[0][jdx + 1] = table_s[0][jdx] + scr_mat['-'][seq_y[jdx]]
        for idx in range(len_x):
            for jdx in range(len_y):
                table_s[idx + 1][jdx + 1] = max([\
                    table_s[idx][jdx] + scr_mat[seq_x[idx]][seq_y[jdx]],\
                    table_s[idx][jdx + 1] + scr_mat[seq_x[idx]]['-'],\
                    table_s[idx + 1][jdx] + scr_mat['-'][seq_y[jdx]]])
    else:
        for idx in range(len_x):
            table_s[idx + 1][0] = max([0, table_s[idx][0] + scr_mat[seq_x[idx]]['-']])
        for jdx in range(len_y):
            table_s[0][jdx + 1] = max([0, table_s[0][jdx] + scr_mat['-'][seq_y[jdx]]])
        for idx in range(len_x):
            for jdx in range(len_y):
                table_s[idx + 1][jdx + 1] = max([0,\
                    table_s[idx][jdx] + scr_mat[seq_x[idx]][seq_y[jdx]],\
                    table_s[idx][jdx + 1] + scr_mat[seq_x[idx]]['-'],\
                    table_s[idx + 1][jdx] + scr_mat['-'][seq_y[jdx]]])
    return table_s

print build_scoring_matrix(set(['A', 'C', 'T', 'G']), 6, 2, -4)
